;; Per-directory local variables for GNU Emacs 23 and later.

((scheme-mode
  .
  ((indent-tabs-mode . nil)
   (eval . (put 'eval-when 'scheme-indent-function 1))
   (eval . (put 'call-with-prompt 'scheme-indent-function 1))
   (eval . (put 'test-assert 'scheme-indent-function 1))
   (eval . (put 'test-assertm 'scheme-indent-function 1))
   (eval . (put 'test-equalm 'scheme-indent-function 1))
   (eval . (put 'test-equal 'scheme-indent-function 1))
   (eval . (put 'test-eq 'scheme-indent-function 1))
   (eval . (put 'call-with-input-string 'scheme-indent-function 1))
   (eval . (put 'call-with-port 'scheme-indent-function 1))
   (eval . (put 'guard 'scheme-indent-function 1))
   (eval . (put 'lambda* 'scheme-indent-function 1))
   (eval . (put 'substitute* 'scheme-indent-function 1))
   (eval . (put 'match-record 'scheme-indent-function 2))

   (eval . (put 'make               'scheme-indent-function 1))
   (eval . (put 'receive            'scheme-indent-function 2))
   (eval . (put 'let-keywords       'scheme-indent-function 3))
   (eval . (put 'for-each           'scheme-indent-function 2))
   (eval . (put 'hash-for-each      'scheme-indent-function 2))
   (eval . (put 'module-for-each    'scheme-indent-function 1))
   (eval . (put 'string-for-each-index 'scheme-indent-function 2))
   (eval . (put 'string-map         'scheme-indent-function 2))
   (eval . (put 'par-map            'scheme-indent-function 2))
   (eval . (put 'n-par-map          'scheme-indent-function 2))
   (eval . (put 'match              'scheme-indent-function 2))
   (eval . (put 'map-proc           'scheme-indent-function 2))
   (eval . (put 'while              'scheme-indent-function 1))
   (eval . (put 'eval-when          'scheme-indent-function 1))
   (eval . (put 'when               'scheme-indent-function 1))
   (eval . (put 'unless             'scheme-indent-function 1))
   (eval . (put 'dolist             'scheme-indent-function 1))
   (eval . (put 'dotimes            'scheme-indent-function 1))
   (eval . (put 'map                'scheme-indent-function 1))
   (eval . (put 'filter-map         'scheme-indent-function 2))
   (eval . (put 'pass-if            'scheme-indent-function 1))
   (eval . (put 'pass-if-exception  'scheme-indent-function 2))
   (eval . (put 'pass-if-equal      'scheme-indent-function 2))
   (eval . (put 'syntax-case        'scheme-indent-function 2))
   (eval . (put 'with-test-prefix   'scheme-indent-function 1))
   (eval . (put 'with-code-coverage 'scheme-indent-function 1))
   (eval . (put 'with-statprof      'scheme-indent-function 1))

   ;; This notably allows '(' in Paredit to not insert a space when the
   ;; preceding symbol is one of these.
   (eval . (modify-syntax-entry ?~ "'"))
   (eval . (modify-syntax-entry ?$ "'"))
   (eval . (modify-syntax-entry ?+ "'"))

   (eval . (put 'override-package 'scheme-indent-function 1))
   ))
 (emacs-lisp-mode . ((indent-tabs-mode . nil))))
